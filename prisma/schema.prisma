generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // Hashed password for credential provider
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AppointmentStatus {
  NEW
  PENDING
  COMPLETED
  CANCELED
  EMERGENCY
}

enum Status {
  AVAILABLE
  ON_DUTY
  OFF_DUTY
  UNAVAILABLE
}

model Patient {
  id           String    @id @default(cuid())
  email        String    @unique
  password     String
  name         String?
  image        String?
  age          Int?
  gender       String?
  appointments Appointment[]
}

model Doctor {
  id             String         @id @default(cuid())
  email          String         @unique
  password       String
  name           String?
  image          String?
  specialization String
  location       String?
  status         Status         @default(AVAILABLE)
  appointments   Appointment[]
  rating         Decimal        @default(0.0)
}

model Ambulance {
  id           String           @id @default(cuid())
  email        String           @unique
  password     String
  name         String?
  image        String?
  status       Status           @default(AVAILABLE)
  appointments Appointment[]
  rating       Decimal          @default(0.0)
}

model Admin {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  name         String?
}

model Appointment {
  id                  String             @id @default(cuid())
  patient             Patient            @relation(fields: [patientId], references: [id])
  patientId           String
  doctor              Doctor?            @relation(fields: [doctorId], references: [id])
  doctorId            String?
  ambulance           Ambulance?         @relation(fields: [ambulanceId], references: [id])
  ambulanceId         String?
  
  dateTime            DateTime?
  condition           String?
  specialization      String?
  status              AppointmentStatus  @default(NEW)
  comments            String?
  description         String?
  prescriptions       String[]
  tests               String[]
  
  relatedAppointments Appointment[]      @relation("RelatedAppointments")
  relatedTo           Appointment[]      @relation("RelatedAppointments")
}